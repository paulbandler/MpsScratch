package Scratch.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.scope.ListScope;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class FieldDefRef_Constraints extends BaseConstraintsDescriptor {
  public FieldDefRef_Constraints() {
    super(CONCEPTS.FieldDefRef$Rv);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.field$e2tn, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_72vuhb_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            final Iterable<SNode> definedFieldDefs = SModelOperations.nodes(SNodeOperations.getModel(_context.getContextNode()), CONCEPTS.FieldDef$5A);
            final SNode containingFieldGroup = SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.FieldGroup$GO, true, false);
            final Iterable<SNode> alreadyReferencedFieldDefsButMe = ListSequence.fromList(SLinkOperations.getChildren(containingFieldGroup, LINKS.fields$K2zi)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return !(Objects.equals(it, _context.getReferenceNode()));
              }
            }).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(it, LINKS.field$e2tn);
              }
            });
            final Iterable<SNode> candidates = Sequence.fromIterable(definedFieldDefs).where(new IWhereFilter<SNode>() {
              public boolean accept(final SNode fieldDef) {
                return Sequence.fromIterable(alreadyReferencedFieldDefsButMe).all(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return !(Objects.equals(it, fieldDef));
                  }
                });
              }
            });
            return ListScope.forNamedElements(candidates);
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_72vuhb_a0a0a0a0a1a0a0a0c = new SNodePointer("r:6728aa83-ba18-46b0-aac5-739bfdab891c(Scratch.constraints)", "4161887550365299906");

  private static final class CONCEPTS {
    /*package*/ static final SConcept FieldDefRef$Rv = MetaAdapterFactory.getConcept(0x12e8d36ff50844b5L, 0x816a8a6eb724d0d3L, 0x39c1fead2a9f35e4L, "Scratch.structure.FieldDefRef");
    /*package*/ static final SConcept FieldDef$5A = MetaAdapterFactory.getConcept(0x12e8d36ff50844b5L, 0x816a8a6eb724d0d3L, 0x39c1fead2aa1187cL, "Scratch.structure.FieldDef");
    /*package*/ static final SConcept FieldGroup$GO = MetaAdapterFactory.getConcept(0x12e8d36ff50844b5L, 0x816a8a6eb724d0d3L, 0x39c1fead2aa3187dL, "Scratch.structure.FieldGroup");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink field$e2tn = MetaAdapterFactory.getReferenceLink(0x12e8d36ff50844b5L, 0x816a8a6eb724d0d3L, 0x39c1fead2a9f35e4L, 0x39c1fead2a9f35e7L, "field");
    /*package*/ static final SContainmentLink fields$K2zi = MetaAdapterFactory.getContainmentLink(0x12e8d36ff50844b5L, 0x816a8a6eb724d0d3L, 0x39c1fead2aa3187dL, 0x39c1fead2aa31891L, "fields");
  }
}
