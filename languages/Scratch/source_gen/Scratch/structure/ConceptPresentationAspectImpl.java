package Scratch.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_FieldDef;
  private ConceptPresentation props_FieldDefRef;
  private ConceptPresentation props_FieldDefinitions;
  private ConceptPresentation props_FieldGroup;
  private ConceptPresentation props_FieldProperty;
  private ConceptPresentation props_FieldPropertyA;
  private ConceptPresentation props_FieldPropertyB;
  private ConceptPresentation props_TypedProperties;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.FieldDef:
        if (props_FieldDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FieldDef = cpb.create();
        }
        return props_FieldDef;
      case LanguageConceptSwitch.FieldDefRef:
        if (props_FieldDefRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x12e8d36ff50844b5L, 0x816a8a6eb724d0d3L, 0x39c1fead2a9f35e4L, 0x39c1fead2a9f35e7L, "field", "", "");
          props_FieldDefRef = cpb.create();
        }
        return props_FieldDefRef;
      case LanguageConceptSwitch.FieldDefinitions:
        if (props_FieldDefinitions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Container for Field definitions");
          cpb.presentationByName();
          props_FieldDefinitions = cpb.create();
        }
        return props_FieldDefinitions;
      case LanguageConceptSwitch.FieldGroup:
        if (props_FieldGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Field uses");
          cpb.presentationByName();
          props_FieldGroup = cpb.create();
        }
        return props_FieldGroup;
      case LanguageConceptSwitch.FieldProperty:
        if (props_FieldProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FieldProperty = cpb.create();
        }
        return props_FieldProperty;
      case LanguageConceptSwitch.FieldPropertyA:
        if (props_FieldPropertyA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A Field Property of type integer");
          cpb.rawPresentation("a");
          props_FieldPropertyA = cpb.create();
        }
        return props_FieldPropertyA;
      case LanguageConceptSwitch.FieldPropertyB:
        if (props_FieldPropertyB == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("b");
          props_FieldPropertyB = cpb.create();
        }
        return props_FieldPropertyB;
      case LanguageConceptSwitch.TypedProperties:
        if (props_TypedProperties == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("types");
          props_TypedProperties = cpb.create();
        }
        return props_TypedProperties;
    }
    return null;
  }
}
